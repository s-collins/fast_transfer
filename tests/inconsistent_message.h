#pragma once
#include "gtest/gtest.h"
#include "ft.h"
#include "mock_serial.hpp"

#define FT_ADDRESS 2

std::deque<uint8_t> get_test_bytes () {
	std::stringstream input;
	input << R"(
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 03 00 01 00 C4 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 03 00 01 00 C4 
06 85 04 02 03 00 01 00 C4 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 03 00 01 00 C4 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 03 00 01 00 C4 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 03 00 01 00 C4 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 03 00 01 00 C4 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 03 00 01 00 C4 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 03 00 01 00 C4 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 03 00 01 00 C4 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 03 00 01 00 C4 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 03 00 01 00 C4 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C
06 85 04 02 0f 01 00 00 02 00 00 03 00 00 04 00 00 05 00 00 4C 
)";

	std::deque<uint8_t> output;
	uint16_t byte;
	while (input >> std::hex >> byte) {
		output.push_back(byte);
	}
	return output;
}

TEST (FTInconsistentMessage, CorrectNumMessages)
{
	// read input file into stringstream
	auto bytes = get_test_bytes();

	// initialize mock serial buffer
	MockSerial_populate_receive_buffer(bytes);

	// initialize fast transfer
	FT_t ft;
	FT_Init(&ft, FT_ADDRESS, MockSerial_put, MockSerial_get, MockSerial_empty);
	int num_received = FT_Receive(&ft);

	// TODO: create some way to test the number of valid messages received
	EXPECT_EQ(89, num_received);

	MockSerial_teardown();
}
